from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart
import keyboards as kb

router = Router()
user_data = {}  # user_id: {'stage': str, 'amount': int, 'term': int, 'percent': float}
# - –ù–£–ñ–ù–û –ß–¢–û–ë–´ –ë–û–õ–¨–®–ï –û–î–ù–û–ô –°–ï–°–°–ò–ò –ó–ê –†–ê–ó

#–Ω–∞–∂–∏–º–∞–µ—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤—ã–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã –≤—ã–±—Ä–∞–ª
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–≥–∞—à–µ–Ω–∏—è:', reply_markup=kb.main_kb)

@router.message(F.text == "üìà –û–±—ã—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ")
async def handle_normal(message: Message):
    user_data[message.from_user.id] = {"stage": "normal_amount"}
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—ã—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:")

@router.message(F.text == "üíµ 52 –Ω–µ–¥–µ–ª–∏ –±–æ–≥–∞—Ç—Å—Ç–≤–∞")
async def handle_wealth(message: Message):
    user_data[message.from_user.id] = {"stage": "wealth_amount"}
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ 52 –Ω–µ–¥–µ–ª–∏ –±–æ–≥–∞—Ç—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—É–º–º—É:")

@router.message(F.text == "üìâ –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ")
async def handle_fast_start(message: Message):
    user_data[message.from_user.id] = {"stage": "fast_amount"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:")
#–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ—Å–∏—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É start –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º, –Ω–æ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –Ω–µ –∑–∞–º–µ—á–µ–Ω–æ
#–∫–∞–∂–¥—ã–π –∫–± —Å–≤—è–∑–∞–Ω —Å –∞–π–¥–∏ —é–∑–µ—Ä–∞, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –∞–π–¥–∏ –Ω–µ –±—É–¥–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∫–æ–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
@router.message()
async def handle_fast_flow(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º.")
        return

    data = user_data[user_id] # –ò–∑ —Å–ª–æ–≤–∞—Ä—è user_data –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (user_id).
    stage = data["stage"] # –ò–∑ —Å–ª–æ–≤–∞—Ä—è data –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç—Ç–∞–ø–∞ –∏ —ç—Ç–∞–ø –∑–∞ —ç—Ç–∞–ø–æ–º —Å–ª–µ–¥—É–µ—Ç —á–µ—Ä–µ–∑ elif

    # –û—Ç–ª–∞–¥–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–∞–ø
    print(f"User {user_id}, Stage: {stage}, Input: {message.text}")
    # —Ç—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —ç—Ç–æ –¥–ª—è —Å–µ–±—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –æ—à–∏–±–∫–∏

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
    if stage.startswith("normal"):  # –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å normal, —Ç–æ –º–æ–∂–Ω–æ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ
        if stage == "normal_amount": 
            if message.text.isdigit(): #–µ—Å–ª–∏ —á–∏—Å–ª–æ
                data["amount"] = int(message.text) # –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                data["stage"] = "normal_term" 
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö:")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")

        elif stage == "normal_term":
            if message.text.isdigit():
                data["term"] = int(message.text)
                data["stage"] = "normal_percent"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ –≥–æ–¥ (%):")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —á–∏—Å–ª–æ–º.")

        elif stage == "normal_percent":
            try:
                percent = float(message.text.replace(",", ".")) # percent = 13.7 (float) –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
                data["percent"] = percent

                # –†–∞—Å—á–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                amount = data["amount"]
                term = data["term"]
                monthly_rate = percent / 100 / 12
                annuity_payment = amount * (monthly_rate * (1 + monthly_rate) ** term) / (
                            (1 + monthly_rate) ** term - 1)
                total_payment = annuity_payment * term
                overpayment = total_payment - amount

                await message.answer(
                    f"üìà –û–±—ã—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ (–∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏):\n"
                    f"–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {amount} —Ä—É–±.\n"
                    f"–°—Ä–æ–∫: {term} –º–µ—Å.\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {percent}% –≥–æ–¥–æ–≤—ã—Ö\n"
                    f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {round(annuity_payment, 2)} —Ä—É–±.\n"
                    f"–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç: {round(total_payment, 2)} —Ä—É–±.\n"
                    f"–ü–µ—Ä–µ–ø–ª–∞—Ç–∞: {round(overpayment, 2)} —Ä—É–±."
                )
                del user_data[user_id]
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —á–∏—Å–ª–æ–º.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ 52 –Ω–µ–¥–µ–ª–∏ –±–æ–≥–∞—Ç—Å—Ç–≤–∞
    elif stage.startswith("wealth"): # –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±–æ–≥–∞—Ç—Å—Ç–≤–∞
        if stage == "wealth_amount":
            if message.text.isdigit():
                data["amount"] = int(message.text)
                data["stage"] = "wealth_increment"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç —Å—É–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –¥–ª—è +100 —Ä—É–±. –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é):")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")

        elif stage == "wealth_increment":
            if message.text.isdigit():
                data["increment"] = int(message.text)
                data["stage"] = "wealth_percent"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥–æ–≤—É—é –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É (0, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è):")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—Ä–æ—Å—Ç —á–∏—Å–ª–æ–º.")

        elif stage == "wealth_percent":
            try:
                percent = float(message.text.replace(",", "."))
                data["percent"] = percent

                # –†–∞—Å—á–µ—Ç –¥–ª—è 52 –Ω–µ–¥–µ–ª—å –±–æ–≥–∞—Ç—Å—Ç–≤–∞ –†–ê–ë–û–¢–ê–ï–¢
                start_amount = data["amount"]
                increment = data["increment"]
                annual_rate = data["percent"]
                weeks = 52

                # –°—É–º–º–∞ –≤–∑–Ω–æ—Å–æ–≤ –ø–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –†–ê–ë–û–¢–ê–ï–¢
                total_contributions = 0
                weekly_payments = []
                for week in range(1, weeks + 1):
                    payment = start_amount + (week - 1) * increment
                    weekly_payments.append(payment)
                    total_contributions += payment

                # –£—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                total_with_interest = total_contributions
                if annual_rate > 0:
                    weekly_rate = annual_rate / 100 / 52
                    total_with_interest = 0
                    for week, payment in enumerate(weekly_payments, 1):
                        remaining_weeks = weeks - week
                        future_value = payment * (1 + weekly_rate) ** remaining_weeks
                        total_with_interest += future_value

                interest_earned = total_with_interest - total_contributions if annual_rate > 0 else 0

                await message.answer(
                    f"üíµ 52 –Ω–µ–¥–µ–ª–∏ –±–æ–≥–∞—Ç—Å—Ç–≤–∞:\n"
                    f"–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—É–º–º–∞: {start_amount} —Ä—É–±.\n"
                    f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: {increment} —Ä—É–±.\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {annual_rate}% –≥–æ–¥–æ–≤—ã—Ö\n"
                    f"–û–±—â–∞—è —Å—É–º–º–∞ –≤–∑–Ω–æ—Å–æ–≤: {round(total_contributions, 2)} —Ä—É–±.\n"
                    f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏: {round(total_with_interest, 2)} —Ä—É–±.\n"
                    f"–ù–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {round(interest_earned, 2)} —Ä—É–±."
                )
                del user_data[user_id]
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —á–∏—Å–ª–æ–º.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
    elif stage.startswith("fast"):
        if stage == "fast_amount":
            if message.text.isdigit():
                data["amount"] = int(message.text)
                data["stage"] = "fast_term"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö:")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")

        elif stage == "fast_term":
            if message.text.isdigit():
                data["term"] = int(message.text)
                data["stage"] = "fast_percent"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –º–µ—Å—è—Ü:")
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —á–∏—Å–ª–æ–º.")

        elif stage == "fast_percent":
            try:
                percent = float(message.text.replace(",", "."))
                data["percent"] = percent
                data["stage"] = "fast_month"
                await message.answer("–ù–∞ –∫–∞–∫–æ–º –º–µ—Å—è—Ü–µ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ?")
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —á–∏—Å–ª–æ–º.")

        elif stage == "fast_month":
            if message.text.isdigit():
                early_month = int(message.text)
                amount = data["amount"]
                term = data["term"]
                annual_rate = data["percent"]

                if not (1 <= early_month <= term):
                    await message.answer("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞.")
                    return

                monthly_rate = annual_rate / 100 / 12
                payment = amount * (monthly_rate * (1 + monthly_rate) ** term) / ((1 + monthly_rate) ** term - 1)
                remaining = amount
                paid_interest = 0
                for month in range(1, early_month + 1):
                    interest = remaining * monthly_rate
                    principal = payment - interest
                    remaining -= principal
                    paid_interest += interest

                final_payment = remaining + (remaining * monthly_rate)

                await message.answer(
                    f"üìâ –î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ:\n"
                    f"–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: {amount} —Ä—É–±.\n"
                    f"–°—Ä–æ–∫: {term} –º–µ—Å.\n"
                    f"–ü—Ä–æ—Ü–µ–Ω—Ç: {annual_rate}% –≥–æ–¥–æ–≤—ã—Ö\n"
                    f"–î–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –Ω–∞ {early_month} –º–µ—Å.\n"
                    f"–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞: {round(remaining, 2)} —Ä—É–±.\n"
                    f"üí∏ –ö –≤–æ–∑–≤—Ä–∞—Ç—É: {round(final_payment, 2)} —Ä—É–±.\n"
                    f"–£–∂–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {round(paid_interest, 2)} —Ä—É–±."
                )
                del user_data[user_id]
            else:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü —á–∏—Å–ª–æ–º.")





